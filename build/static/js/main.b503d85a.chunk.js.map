{"version":3,"sources":["components/TableData.js","components/Heading.js","components/DropdownOption.js","App.js","index.js"],"names":["TableData","props","employeeId","jobTitleName","firstName","lastName","phoneNumber","emailAddress","Heading","className","DropdownOption","value","App","state","tableRowHtmlArray","sortedArray","searchColumnValue","searchValueHtmlArray","setStateValue","stateToUpdate","setState","employeeListHtml","resultArray","map","employee","index","key","filterByColumnChange","event","a","searchByColumn","target","updateSortedArray","employees","columnValueArray","createDropdownList","columnValueHtmlArray","createDropdownListHtml","Array","from","Set","uniqueColumnValueArray","length","val","filterValueChange","searchValue","parseInt","filteredEmployeeArray","filter","sortByColumnChange","console","log","sortedObjectArray","sort","b","nameA","nameB","this","id","onChange","scope","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b503d85a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction TableData(props) {\r\n  return (\r\n    <tr>\r\n      <td>{props.employeeId}</td>\r\n      <td>{props.jobTitleName}</td>\r\n      <td>{props.firstName}</td>\r\n      <td>{props.lastName}</td>\r\n      <td>{props.phoneNumber}</td>\r\n      <td>{props.emailAddress}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default TableData;\r\n","import React from \"react\";\r\n\r\nfunction Heading() {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        <h2 className=\"display-4\">Employee Dictionary</h2>\r\n        <p className=\"lead\">Current employee database for the organisation.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Heading;\r\n","import React from \"react\";\r\n\r\nfunction DropdownOption(props) {\r\n  return <option value={props.value}>{props.value}</option>;\r\n}\r\n\r\nexport default DropdownOption;\r\n","import React, { Component } from \"react\";\r\nimport employees from \"../src/util/data/data.json\";\r\nimport TableData from \"./components/TableData\";\r\nimport Heading from \"./components/Heading\";\r\nimport DropdownOption from \"./components/DropdownOption\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    tableRowHtmlArray: [],\r\n    sortedArray: [],\r\n    searchColumnValue: \"all\",\r\n    searchValueHtmlArray: []\r\n  };\r\n\r\n  //This is for setting all the states\r\n  setStateValue = (stateToUpdate, value) => {\r\n    this.setState({ [stateToUpdate]: value });\r\n  };\r\n\r\n  //Creating the data rows for employees\r\n  employeeListHtml = resultArray => {\r\n    let tableRowHtml = resultArray.map((employee, index) => (\r\n      <TableData\r\n        key={index}\r\n        employeeId={employee.employeeId}\r\n        jobTitleName={employee.jobTitleName}\r\n        firstName={employee.firstName}\r\n        lastName={employee.lastName}\r\n        phoneNumber={employee.phoneNumber}\r\n        emailAddress={employee.emailAddress}\r\n      />\r\n    ));\r\n    return tableRowHtml;\r\n  };\r\n\r\n  //This is for updating table for first loading\r\n  componentDidMount() {\r\n    this.updateSortedArray(employees); // this is for sorting\r\n    this.setStateValue(\"tableRowHtmlArray\", this.employeeListHtml(employees));\r\n  }\r\n\r\n  //Creating dropdown list of distinct values for selected column\r\n  filterByColumnChange = async event => {\r\n    const searchByColumn = event.target.value;\r\n    //await is used since setstate is asynchronoue\r\n    this.setStateValue(\"searchColumnValue\", searchByColumn); // setting to selected value each time\r\n    this.updateSortedArray(employees);\r\n    //if user select back \"All\", then remove all filters\r\n    if (searchByColumn === \"all\") {\r\n      // this is for sorting\r\n      await this.setStateValue(\r\n        \"tableRowHtmlArray\",\r\n        this.employeeListHtml(employees)\r\n      ); //putting back all the employees\r\n      await this.setStateValue(\"searchValueHtmlArray\", \"\"); // setting to empty value\r\n    }\r\n    //if user select a specific column, get distinct values and update dropdoen list for column values\r\n    else {\r\n      let columnValueArray = this.createDropdownList(searchByColumn); //creating distinct column values\r\n      let columnValueHtmlArray = this.createDropdownListHtml(columnValueArray);\r\n      this.setStateValue(\"searchValueHtmlArray\", columnValueHtmlArray);\r\n    }\r\n  };\r\n\r\n  async updateSortedArray(sortedArray) {\r\n    await this.setStateValue(\"sortedArray\", sortedArray);\r\n  }\r\n\r\n  //Getting columns for drop down list for select column\r\n  createDropdownList = searchByColumn => {\r\n    let columnValueArray = Array.from(\r\n      new Set(employees.map(employee => employee[searchByColumn]))\r\n    );\r\n    return columnValueArray; //retruning column value array\r\n  };\r\n\r\n  //Creating html for drop down list for select column\r\n  createDropdownListHtml = uniqueColumnValueArray => {\r\n    if (uniqueColumnValueArray.length) {\r\n      let uniqueColumnValueHtmlArray = uniqueColumnValueArray.map(\r\n        (val, index) => <DropdownOption key={index} value={val} />\r\n      );\r\n      return uniqueColumnValueHtmlArray;\r\n    }\r\n  };\r\n\r\n  // filter array based on filter condition\r\n  filterValueChange = async event => {\r\n    let searchValue = event.target.value;\r\n    // if the column value is an integer (for user id column), then assign the value as integer\r\n    if (searchValue == parseInt(searchValue, 10)) {\r\n      searchValue = parseInt(searchValue);\r\n    }\r\n    // filter based on search value\r\n    let filteredEmployeeArray = employees.filter(\r\n      employee => employee[this.state.searchColumnValue] === searchValue\r\n    );\r\n    this.updateSortedArray(filteredEmployeeArray); // this is for sorting after filter\r\n\r\n    await this.setStateValue(\r\n      \"tableRowHtmlArray\",\r\n      this.employeeListHtml(filteredEmployeeArray)\r\n    );\r\n  };\r\n\r\n  sortByColumnChange = event => {\r\n    let searchValue = event.target.value;\r\n    console.log(searchValue);\r\n    // sort by name\r\n    let sortedObjectArray = this.state.sortedArray.sort(function(a, b) {\r\n      var nameA = a[searchValue];\r\n      var nameB = b[searchValue];\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n      // names must be equal\r\n      return 0;\r\n    });\r\n    this.updateSortedArray(sortedObjectArray); // update after sorting\r\n    this.setStateValue(\r\n      \"tableRowHtmlArray\",\r\n      this.employeeListHtml(sortedObjectArray)\r\n    ); // get all the html and update state\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Heading />\r\n        <div className=\"container\">\r\n          <div id=\"wrapper\" className=\"col-sm-12 col-md-12\">\r\n            <div id=\"left\" className=\"col-sm-12 col-md-6\">\r\n              {/* This section is statically created since columns are not changing */}\r\n              <label className=\"col-sm-12 col-md-6\">Filter by:</label>\r\n              <select\r\n                className=\"col-sm-12 col-md-6 select-css\"\r\n                id=\"filter-column\"\r\n                onChange={this.filterByColumnChange}\r\n              >\r\n                <option value=\"all\">All</option>\r\n                <option value=\"employeeId\">Employee ID</option>\r\n                <option value=\"jobTitleName\">Title</option>\r\n                <option value=\"firstName\">First Name</option>\r\n                <option value=\"lastName\">Last Name</option>\r\n                <option value=\"phoneNumber\">Phone</option>\r\n                <option value=\"emailAddress\">Email</option>\r\n              </select>\r\n              {/* This section is dynamically created based on column to filter */}\r\n              <label className=\"col-sm-12 col-md-6\">Filter value:</label>\r\n              <select\r\n                className=\"col-sm-12 col-md-6 select-css\"\r\n                id=\"filter-value\"\r\n                onChange={this.filterValueChange}\r\n              >\r\n                {this.state.searchValueHtmlArray}\r\n              </select>\r\n            </div>\r\n            <div id=\"right\" className=\"col-sm-12 col-md-6\">\r\n              <label className=\"col-sm-12 col-md-6\">Sort by:</label>\r\n              <select\r\n                className=\"col-sm-12 col-md-6 select-css\"\r\n                id=\"filter-column\"\r\n                onChange={this.sortByColumnChange}\r\n              >\r\n                <option value=\"employeeId\">Employee ID</option>\r\n                <option value=\"jobTitleName\">Title</option>\r\n                <option value=\"firstName\">First Name</option>\r\n                <option value=\"lastName\">Last Name</option>\r\n                <option value=\"phoneNumber\">Phone</option>\r\n                <option value=\"emailAddress\">Email</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          {/* This section of the table is statically created since columns are not changing */}\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">Employee ID</th>\r\n                <th scope=\"col\">Title</th>\r\n                <th scope=\"col\">First Name</th>\r\n                <th scope=\"col\">Last Name</th>\r\n                <th scope=\"col\">Phone</th>\r\n                <th scope=\"col\">Email</th>\r\n              </tr>\r\n            </thead>\r\n            {/* This section of the table is dynamically created */}\r\n            <tbody>{this.state.tableRowHtmlArray}</tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}